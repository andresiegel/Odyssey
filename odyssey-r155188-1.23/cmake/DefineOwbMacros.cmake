##################################################
# Generate lut for JavaScriptCore and for        #
# bindings/js in WebCore.                        #
##################################################

# - Create hash table *.lut.h
# GENERATE_HASH_LUT(input_file output_file)
MACRO (GENERATE_HASH_LUT _input _output)
    SET(HASH_LUT_GENERATOR "${OWB_SOURCE_DIR}/Source/JavaScriptCore/create_hash_table")

    FOREACH (_tmp ${ARGN})
        IF (${_tmp} STREQUAL "MAIN_DEPENDENCY")
            SET(_main_dependency ${_input})
        ENDIF ()
    ENDFOREACH ()

    ADD_CUSTOM_COMMAND(
        OUTPUT ${_output}
        MAIN_DEPENDENCY ${_main_dependency}
        DEPENDS ${_input} ${HASH_LUT_GENERATOR}
        COMMAND ${PERL_EXECUTABLE} ${HASH_LUT_GENERATOR} ${_input} > ${_output}
        VERBATIM)
ENDMACRO ()

set(CREATE_HASH_TABLE ${OWB_SOURCE_DIR}/Source/JavaScriptCore/create_hash_table)
macro(create_lut_jsc _srcs_LIST _in_FILE _out_FILE _dep_FILE)
    get_filename_component(_dirname ${_out_FILE} PATH)
    add_custom_command(
        OUTPUT ${OWB_BINARY_DIR}/${_out_FILE}
        COMMAND mkdir -p ${OWB_BINARY_DIR}/${_dirname}
        COMMAND ${PERL_EXECUTABLE} ${CREATE_HASH_TABLE} ${OWB_SOURCE_DIR}/${_in_FILE} -i > ${OWB_BINARY_DIR}/${_out_FILE}
        DEPENDS ${OWB_SOURCE_DIR}/${_in_FILE} ${OWB_SOURCE_DIR}/${_dep_FILE}
    )
    list(APPEND ${_srcs_LIST}
        ${OWB_BINARY_DIR}/${_out_FILE}
    )
endmacro(create_lut_jsc)

macro(create_lut_webcore _srcs_LIST _in_FILE _out_FILE _dep_FILE)
    get_filename_component(_dirname ${_out_FILE} PATH)
    add_custom_command(
        OUTPUT ${OWB_BINARY_DIR}/${_out_FILE}
        COMMAND mkdir -p ${OWB_BINARY_DIR}/${_dirname}
        COMMAND ${PERL_EXECUTABLE} ${CREATE_HASH_TABLE} ${OWB_SOURCE_DIR}/${_in_FILE} -n WebCore > ${OWB_BINARY_DIR}/${_out_FILE}
        DEPENDS ${OWB_SOURCE_DIR}/${_in_FILE} ${OWB_SOURCE_DIR}/${_dep_FILE}
    )
    list(APPEND ${_srcs_LIST}
        ${OWB_BINARY_DIR}/${_out_FILE}
    )
endmacro(create_lut_webcore)

macro(create_lexer _srcs_LIST _in_FILE _out_FILE _dep_FILE)
    get_filename_component(_dirname ${_out_FILE} PATH)
    add_custom_command(
        OUTPUT ${OWB_BINARY_DIR}/${_out_FILE}
        COMMAND mkdir -p ${OWB_BINARY_DIR}/${_dirname}
        COMMAND ${PERL_EXECUTABLE} ${CREATE_HASH_TABLE} ${OWB_SOURCE_DIR}/${_in_FILE} > ${OWB_BINARY_DIR}/${_out_FILE}
        DEPENDS ${OWB_SOURCE_DIR}/${_in_FILE} ${OWB_SOURCE_DIR}/${_dep_FILE}
    )
    list(APPEND ${_srcs_LIST}
        ${OWB_BINARY_DIR}/${_out_FILE}
    )
endmacro(create_lexer)

macro(create_cpp_lut _in_FILE _out_FILE _dep_FILE)
    get_filename_component(_basename ${_out_FILE} NAME_WE)
    add_custom_command(
        OUTPUT ${OWB_BINARY_DIR}/${_out_FILE}
        COMMAND mkdir -p ${OWB_BINARY_DIR}/${_dirname}
        COMMAND ${PERL_EXECUTABLE} ${CREATE_HASH_TABLE} ${OWB_SOURCE_DIR}/${_in_FILE} > ${OWB_SOURCE_DIR}/${_out_FILE}
        DEPENDS ${OWB_SOURCE_DIR}/${_in_FILE} ${OWB_SOURCE_DIR}/${_dep_FILE}
    )
endmacro(create_cpp_lut)

##################################################
# Create cpp file from idl.                      #
##################################################

macro(create_generated_cpp_helper _inlName)
    get_filename_component(_baseName ${_inlName} NAME_WE)
    if(NOT EXISTS ${OWB_BINARY_DIR}/generated_sources/WebCore/${_baseName}.cpp)
        file(WRITE ${OWB_BINARY_DIR}/generated_sources/WebCore/${_baseName}.cpp
"/* This file is autogenerated by CMake.                                       *
* Do not edit, changes will be lost.                                         *
* With the CMake buildsystem giving generated-but-not-compiled-on-their-own  *
* files the suffix \".cpp\" is not recommended, because it breaks the          *
* dependency handling. So the actual generated file has the suffix \".inl\"    *
* and this file here only exists as a helper.                                */
#include \"${OWB_BINARY_DIR}/${_inlName}\"\n")
    endif(NOT EXISTS ${OWB_BINARY_DIR}/generated_sources/WebCore/${_baseName}.cpp)
    list(APPEND WEBCORE_SRC 
        ${OWB_BINARY_DIR}/${_inlName})
endmacro(create_generated_cpp_helper _inlName)


##################################################
# Create symlink to ease include with OWBAL and  #
# WKAL.                                          #
##################################################

macro(create_include_link _src_dir _dst_dir)
IF(WIN32)
    execute_process(
        COMMAND python ${OWB_SOURCE_DIR}/BAL/Scripts/createLinkwin32.py ${CMAKE_CURRENT_SOURCE_DIR}/${_src_dir} generated_link/${_dst_dir}
        WORKING_DIRECTORY ${OWB_BINARY_DIR})
ELSE(WIN32)
    execute_process(
        COMMAND python ${OWB_SOURCE_DIR}/BAL/Scripts/createLink.py ${CMAKE_CURRENT_SOURCE_DIR}/${_src_dir} generated_link/${_dst_dir}
        WORKING_DIRECTORY ${OWB_BINARY_DIR})
ENDIF(WIN32)
endmacro(create_include_link)

##################################################
# Create moc file                                #
##################################################

macro(owb_generate_moc _srcs_LIST _in_FILE _out_FILE)
    execute_process(
        COMMAND mkdir -p ${OWB_BINARY_DIR}/generated_sources/moc/
    )
    qt4_generate_moc(${_in_FILE} ${OWB_BINARY_DIR}/generated_sources/moc/${_out_FILE})
    list(APPEND ${_srcs_LIST} ${OWB_BINARY_DIR}/generated_sources/moc/${_out_FILE})
endmacro(owb_generate_moc)

##################################################
# Correctly set FEATURE_DEFINES_JAVASCRIPT var   #
##################################################

macro(add_feature _feature _var)
    set(FEATURE ENABLE_${_feature})
    if(${FEATURE})
        list(APPEND ${_var} ${FEATURE}=1)
    endif(${FEATURE})
endmacro(add_feature)

macro(add_javascript_feature _feature)
    add_feature(${_feature} FEATURE_DEFINES_JAVASCRIPT)
endmacro(add_javascript_feature)

macro(add_javascript_features)
    list(APPEND FEATURE_DEFINES_JAVASCRIPT LANGUAGE_JAVASCRIPT=1)
    add_javascript_feature(3D_RENDERING)
    add_javascript_feature(CEHTML)
    add_javascript_feature(DAE)
    add_javascript_feature(DATABASE)
    add_javascript_feature(DATAGRID)
    add_javascript_feature(DOM_STORAGE)
    add_javascript_feature(EVENTSOURCE)
    add_javascript_feature(GEOLOCATION)
    add_javascript_feature(INSPECTOR)
    # Specific hack
    if(ENABLE_INSPECTOR)
        list(APPEND FEATURE_DEFINES_JAVASCRIPT ENABLE_JAVASCRIPT_DEBUGGER=1)
    endif(ENABLE_INSPECTOR)
    add_javascript_feature(MATHML)
    add_javascript_feature(OFFLINE_WEB_APPLICATIONS)
    add_javascript_feature(SHARED_WORKERS)
    add_javascript_feature(SVG)
    add_javascript_feature(SVG_ANIMATION)
    add_javascript_feature(SVG_AS_IMAGE)
    add_javascript_feature(SVG_FILTERS)
    add_javascript_feature(SVG_SVG_FONTS)
    add_javascript_feature(SVG_FOREIGN_OBJECT)
    # Specific hack
    if(ENABLE_SVG_USE_ELEMENT)
        list(APPEND FEATURE_DEFINES_JAVASCRIPT ENABLE_SVG_USE=1)
    endif(ENABLE_SVG_USE_ELEMENT)
    add_javascript_feature(TOUCH_EVENTS)
    add_javascript_feature(VIDEO)
    add_javascript_feature(WCSS)
    add_javascript_feature(WEB_SOCKETS)
    add_javascript_feature(WML)
    add_javascript_feature(WORKERS)
    add_javascript_feature(XHTMLMP)
    add_javascript_feature(XPATH)
    add_javascript_feature(XSLT)
endmacro(add_javascript_features)

##################################################
# Correctly set SVG_FEATURES var                 #
##################################################

macro(add_svg_feature _feature)
    add_feature(${_feature} SVG_FEATURES)
endmacro(add_svg_feature)

macro(add_svg_features)
    add_svg_feature(SVG_ANIMATION)
    add_svg_feature(SVG_AS_IMAGE)
    add_svg_feature(FILTERS)
    add_svg_feature(SVG_FONTS)
    add_svg_feature(SVG_FOREIGN_OBJECT)
    # Specific hack
    if(ENABLE_SVG_USE_ELEMENT)
        list(APPEND SVG_FEATURES ENABLE_SVG_USE=1)
    endif(ENABLE_SVG_USE_ELEMENT)
endmacro(add_svg_features)

#################################################
# Dependencies                                  #
#################################################

# Append the given dependencies to the source file
MACRO(ADD_SOURCE_DEPENDENCIES _source _deps)
  GET_SOURCE_FILE_PROPERTY(_tmp ${_source} OBJECT_DEPENDS)
  IF (NOT _tmp)
    SET (_tmp "")
  ENDIF ()

  FOREACH (f ${_deps})
    LIST(APPEND _tmp "${f}")
  ENDFOREACH ()

  SET_SOURCE_FILES_PROPERTIES(${_source} PROPERTIES OBJECT_DEPENDS "${_tmp}")
#  UNSET(_tmp)
ENDMACRO()


# Append the given dependencies to the source file
# This one consider the given dependencies are in ${DERIVED_SOURCES_DIR}
# and prepends this to every member of dependencies list
MACRO(ADD_SOURCE_DERIVED_DEPENDENCIES _source _deps)
  SET(_tmp "")
  FOREACH (f ${_deps})
    LIST(APPEND _tmp "${WEBCORE_GENERATED_DIR}/${f}")
  ENDFOREACH ()

  ADD_SOURCE_DEPENDENCIES(${_source} ${_tmp})
#  UNSET(_tmp)
ENDMACRO()

#################################################
# Generators                                    #
#################################################

MACRO (GENERATE_JSON _json _output _script)
  ADD_CUSTOM_COMMAND(
    OUTPUT ${_output}
    DEPENDS ${_input} ${_script}
    COMMAND python ${_script} -o ${_output} ${_json}
    VERBATIM)
ENDMACRO ()           

MACRO (GENERATE_GPERF _input _output _func _opts)
    ADD_CUSTOM_COMMAND(
        OUTPUT ${_output}
	DEPENDS ${_input}
        COMMAND ${GPERF_EXECUTABLE} -CDEGIot -L ANSI-C --key-positions=* -s 2 -N ${_func} ${_opts} < ${_input} > ${_output}
        VERBATIM)
ENDMACRO ()  

MACRO (GENERATE_GRAMMAR _prefix _input _output_header _output_source _features)
    ADD_CUSTOM_COMMAND(
        OUTPUT ${_output_header} ${_output_source}
	MAIN_DEPENDENCY ${_input}
	DEPENDS ${_input}
	COMMAND ${PERL_EXECUTABLE} -I ${OWB_SOURCE_DIR}/Source/WebCore/bindings/scripts ${OWB_SOURCE_DIR}/Source/WebCore/css/makegrammar.pl --outputDir ${WEBCORE_GENERATED_DIR} --extraDefines "${_features}" --preprocessor "${CODE_GENERATOR_PREPROCESSOR}" --bison "${BISON_EXECUTABLE}" --symbolsPrefix ${_prefix} ${_input}
	WORKING_DIRECTORY ${_working_directory}
        #COMMAND ${BISON_EXECUTABLE} -p ${_prefix} ${_input} -o ${_output_source} --defines=${_output_header}
        VERBATIM)
ENDMACRO ()       

MACRO(GENERATE_INSPECTOR_FROM_IDL _source)
  GET_FILENAME_COMPONENT(_name ${_source} NAME_WE)
  ADD_CUSTOM_COMMAND(
    OUTPUT  ${WEBCORE_GENERATED_DIR}/${_name}Frontend.cpp ${WEBCORE_GENERATED_DIR}/${_name}Frontend.h ${WEBCORE_GENERATED_DIR}/${_name}BackendDispatcher.cpp ${WEBCORE_GENERATED_DIR}/${_name}BackendDispatcher.h
    MAIN_DEPENDENCY ${OWB_SOURCE_DIR}/Source/WebCore/${_source}
    DEPENDS ${OWB_SOURCE_DIR}/Source/WebCore/inspector/CodeGeneratorInspector.pm ${SUPPLEMENTAL_DEPENDENCY_FILE} ${IDL_ATTRIBUTES_FILE}
    COMMAND ${PERL_EXECUTABLE} -I${OWB_SOURCE_DIR}/Source/WebCore/bindings/scripts -I${OWB_SOURCE_DIR}/Source/WebCore/inspector ${OWB_SOURCE_DIR}/Source/WebCore/bindings/scripts/generate-bindings.pl --define "${FEATURE_DEFINES}" --generator Inspector --outputdir ${WEBCORE_GENERATED_DIR} --preprocessor "${CODE_GENERATOR_PREPROCESSOR}" --supplementalDependencyFile ${SUPPLEMENTAL_DEPENDENCY_FILE} --idlAttributesFile ${IDL_ATTRIBUTES_FILE}  ${OWB_SOURCE_DIR}/Source/WebCore/${_source}
    VERBATIM)
  LIST(APPEND WEBCORE_SRC ${WEBCORE_GENERATED_DIR}/${_name}Frontend.cpp)
ENDMACRO()   

SET(SCRIPTS_BINDINGS
  ${OWB_SOURCE_DIR}/Source/WebCore/bindings/scripts/CodeGenerator.pm
  ${OWB_SOURCE_DIR}/Source/WebCore/bindings/scripts/IDLParser.pm
#  ${OWB_SOURCE_DIR}/Source/WebCore/bindings/scripts/IDLStructure.pm
  ${OWB_SOURCE_DIR}/Source/WebCore/bindings/scripts/InFilesParser.pm
  ${OWB_SOURCE_DIR}/Source/WebCore/bindings/scripts/preprocessor.pm) 

MACRO (GENERATE_FONT_NAMES _infile)
    SET(NAMES_GENERATOR ${OWB_SOURCE_DIR}/Source/WebCore/dom/make_names.pl)
    SET(_arguments  --fonts ${_infile})
    SET(_outputfiles ${WEBCORE_GENERATED_DIR}/WebKitFontFamilyNames.cpp ${WEBCORE_GENERATED_DIR}/WebKitFontFamilyNames.h)

    ADD_CUSTOM_COMMAND(
        OUTPUT  ${_outputfiles}
        DEPENDS ${NAMES_GENERATOR} ${SCRIPTS_BINDINGS} ${_infile}
        COMMAND ${PERL_EXECUTABLE} -I${OWB_SOURCE_DIR}/Source/WebCore/bindings/scripts ${NAMES_GENERATOR} --outputDir ${WEBCORE_GENERATED_DIR} ${_arguments}
        VERBATIM)
ENDMACRO ()

MACRO (GENERATE_EVENT_FACTORY _infile _outfile)
    SET(NAMES_GENERATOR ${OWB_SOURCE_DIR}/Source/WebCore/dom/make_event_factory.pl)

    ADD_CUSTOM_COMMAND(
        OUTPUT  ${WEBCORE_GENERATED_DIR}/${_outfile}
        DEPENDS ${NAMES_GENERATOR} ${SCRIPTS_BINDINGS} ${_infile}
	COMMAND ${PERL_EXECUTABLE} -I${OWB_SOURCE_DIR}/Source/WebCore/bindings/scripts ${NAMES_GENERATOR} --input ${_infile} --outputDir ${WEBCORE_GENERATED_DIR}
        VERBATIM)
ENDMACRO ()     

MACRO (GENERATE_EXCEPTION_CODE_DESCRIPTION _infile _outfile)
    SET(NAMES_GENERATOR ${OWB_SOURCE_DIR}/Source/WebCore/dom/make_dom_exceptions.pl)

    ADD_CUSTOM_COMMAND(
	OUTPUT  ${WEBCORE_GENERATED_DIR}/${_outfile}
        DEPENDS ${NAMES_GENERATOR} ${SCRIPTS_BINDINGS} ${_infile}
	COMMAND ${PERL_EXECUTABLE} -I${OWB_SOURCE_DIR}/Source/WebCore/bindings/scripts ${NAMES_GENERATOR} --input ${_infile} --outputDir ${WEBCORE_GENERATED_DIR}
        VERBATIM)
ENDMACRO ()         

macro(GENERATE_SETTINGS_MACROS _infile _outfile)
    set(NAMES_GENERATOR ${OWB_SOURCE_DIR}/Source/WebCore/page/make_settings.pl)

    add_custom_command(
	OUTPUT ${WEBCORE_GENERATED_DIR}/${_outfile} ${WEBCORE_GENERATED_DIR}/InternalSettingsGenerated.h ${WEBCORE_GENERATED_DIR}/InternalSettingsGenerated.cpp ${WEBCORE_GENERATED_DIR}/InternalSettingsGenerated.idl
        MAIN_DEPENDENCY ${_infile}
        DEPENDS ${NAMES_GENERATOR} ${SCRIPTS_BINDINGS}
	COMMAND ${PERL_EXECUTABLE} -I${OWB_SOURCE_DIR}/Source/WebCore/bindings/scripts ${NAMES_GENERATOR} --input ${_infile} --outputDir ${WEBCORE_GENERATED_DIR}
        VERBATIM)
endmacro()   

MACRO (GENERATE_DOM_NAMES _namespace _attrs)
    SET(CODE_GENERATOR_PREPROCESSOR ppc-amigaos-cpp)
    SET(NAMES_GENERATOR ${OWB_SOURCE_DIR}/Source/WebCore/dom/make_names.pl)
    SET(_arguments  --attrs ${_attrs})
    SET(_outputfiles ${WEBCORE_GENERATED_DIR}/${_namespace}Names.cpp ${WEBCORE_GENERATED_DIR}/${_namespace}Names.h)
    SET(_extradef)
    SET(_tags)

    FOREACH (f ${ARGN})
        IF (_tags)
            SET(_extradef "${_extradef} ${f}")
        ELSE ()
            SET(_tags ${f})
        ENDIF ()
    ENDFOREACH ()

    IF (_tags)
        SET(_arguments "${_arguments}" --tags ${_tags} --factory --wrapperFactory)
        SET(_outputfiles "${_outputfiles}" ${WEBCORE_GENERATED_DIR}/${_namespace}ElementFactory.cpp ${WEBCORE_GENERATED_DIR}/${_namespace}ElementFactory.h ${WEBCORE_GENERATED_DIR}/JS${_namespace}ElementWrapperFactory.cpp ${WEBCORE_GENERATED_DIR}/JS${_namespace}ElementWrapperFactory.h)
    ENDIF ()

    IF (_extradef)
        SET(_additionArguments "${_additionArguments}" --extraDefines=${_extradef})
    ENDIF ()

    ADD_CUSTOM_COMMAND(
        OUTPUT  ${_outputfiles}
        DEPENDS ${NAMES_GENERATOR} ${SCRIPTS_BINDINGS} ${_attrs} ${_tags}
	COMMAND ${PERL_EXECUTABLE} -I${OWB_SOURCE_DIR}/Source/WebCore/bindings/scripts ${NAMES_GENERATOR} --preprocessor "${CODE_GENERATOR_PREPROCESSOR}" --outputDir ${WEBCORE_GENERATED_DIR} ${_arguments} ${_additionArguments}
        VERBATIM)
ENDMACRO ()  

MACRO(MAKE_HASH_TOOLS _source)
    GET_FILENAME_COMPONENT(_name ${_source} NAME_WE)

    SET(_hash_tools_h "")

    IF (${_source} STREQUAL "DocTypeStrings")
        SET(_hash_tools_h "${WEBCORE_GENERATED_DIR}/HashTools.h")
    ELSE ()
        SET(_hash_tools_h "")
    ENDIF ()

    ADD_CUSTOM_COMMAND(
        OUTPUT ${WEBCORE_GENERATED_DIR}/${_name}.cpp ${_hash_tools_h}
        MAIN_DEPENDENCY ${_source}.gperf
	COMMAND ${PERL_EXECUTABLE} ${OWB_SOURCE_DIR}/Source/WebCore/make-hash-tools.pl ${WEBCORE_GENERATED_DIR} ${_source}.gperf
        VERBATIM)

ENDMACRO()   
